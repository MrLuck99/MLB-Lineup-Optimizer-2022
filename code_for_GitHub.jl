{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "93ba5920",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Solving Problem...\n",
      "\n"
     ]
    },
    {
     "ename": "LoadError",
     "evalue": "DimensionMismatch(\"mismatch in dimension 1 (expected 1 got 155)\")",
     "output_type": "error",
     "traceback": [
      "DimensionMismatch(\"mismatch in dimension 1 (expected 1 got 155)\")",
      "",
      "Stacktrace:",
      "  [1] _cs",
      "    @ ./abstractarray.jl:1688 [inlined]",
      "  [2] _cshp",
      "    @ ./abstractarray.jl:1684 [inlined]",
      "  [3] _cat_size_shape",
      "    @ ./abstractarray.jl:1664 [inlined]",
      "  [4] cat_size_shape(dims::Tuple{Bool, Bool}, X::Nothing, tail::Vector{Int64})",
      "    @ Base ./abstractarray.jl:1662",
      "  [5] _cat_t(::Val{2}, ::Type{Union{Nothing, Int64}}, ::Nothing, ::Vararg{Any})",
      "    @ Base ./abstractarray.jl:1708",
      "  [6] cat_t(::Type{Union{Nothing, Int64}}, ::Nothing, ::Vararg{Any}; dims::Val{2})",
      "    @ Base ./abstractarray.jl:1705",
      "  [7] _cat",
      "    @ ./abstractarray.jl:1703 [inlined]",
      "  [8] #cat#141",
      "    @ ./abstractarray.jl:1861 [inlined]",
      "  [9] hcat",
      "    @ ./abstractarray.jl:1823 [inlined]",
      " [10] create_lineups(num_lineups::Int64, num_overlap::Int64, path_hitters::String, path_pitchers::String, formulation::typeof(one_lineup_Type_4), path_to_output::String)",
      "    @ Main ./In[13]:266",
      " [11] top-level scope",
      "    @ In[13]:348",
      " [12] eval",
      "    @ ./boot.jl:373 [inlined]",
      " [13] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String)",
      "    @ Base ./loading.jl:1196"
     ]
    }
   ],
   "source": [
    "using DataFrames\n",
    "using MathOptInterface\n",
    "using JuMP, GLPK\n",
    "using CSV\n",
    "\n",
    "num_lineups = 25\n",
    "num_overlap = 6\n",
    "path_hitters = \"Hitters.csv\"\n",
    "path_pitchers = \"Pitchers.csv\"\n",
    "path_to_output = \"output.csv\"\n",
    "\n",
    "# This is a function that creates one lineup using the Type 4 formulation from the paper\n",
    "function one_lineup_Type_4(hitters, pitchers, lineups, num_overlap, num_hitters, num_pitchers, catcher, first_baseman, second_baseman, third_baseman, shortstop, outfielders, num_teams, hitters_teams, pitchers_opponents)\n",
    "    m = Model(GLPK.Optimizer)\n",
    "    \n",
    "    \n",
    "    # Variable for Hitters in lineup\n",
    "    @variable(m, hitters_lineup[i=1:num_hitters], Bin)\n",
    "    \n",
    "    # Variable for Pitcher in lineup\n",
    "    @variable(m, pitchers_lineup[i=1:num_pitchers], Bin)\n",
    "\n",
    "    # One Pitcher constraint\n",
    "    @constraint(m, sum(pitchers_lineup[i] for i=1:num_pitchers) == 1)\n",
    "    \n",
    "    # Eight Hitters constraint\n",
    "    @constraint(m, sum(hitters_lineup[i] for i=1:num_hitters) == 8)\n",
    "    \n",
    "    # between 1 and 2 catchers + first baseman\n",
    "    @constraint(m, sum((catcher)[i]*hitters_lineup[i] for i=1:num_hitters) <= 2)\n",
    "    @constraint(m, 1 <= sum(catcher[i]*hitters_lineup[i] for i=1:num_hitters))\n",
    "    \n",
    "    # between 1 and 2 second basemen\n",
    "    @constraint(m, sum(second_baseman[i]*hitters_lineup[i] for i=1:num_hitters) <= 2)\n",
    "    @constraint(m, 1 <= sum(second_baseman[i]*hitters_lineup[i] for i=1:num_hitters))\n",
    "    \n",
    "    # between 1 and 2 third basemen\n",
    "    @constraint(m, sum(third_baseman[i]*hitters_lineup[i] for i=1:num_hitters) <= 2)\n",
    "    @constraint(m, 1 <= sum(third_baseman[i]*hitters_lineup[i] for i=1:num_hitters))\n",
    "    \n",
    "    # between 1 and 2 shortstops\n",
    "    @constraint(m, sum(shortstop[i]*hitters_lineup[i] for i=1:num_hitters) <= 2)\n",
    "    @constraint(m, 1 <= sum(shortstop[i]*hitters_lineup[i] for i=1:num_hitters))\n",
    "    \n",
    "    # between 3 and 4 outfielders\n",
    "    @constraint(m, 3 <= sum(outfielders[i]*hitters_lineup[i] for i=1:num_hitters))\n",
    "    @constraint(m, sum(outfielders[i]*hitters_lineup[i] for i=1:num_hitters) <= 4)\n",
    "\n",
    "    \n",
    "\n",
    "    # Financial Constraint\n",
    "    @constraint(m, sum(hitters[i,:Salary]*hitters_lineup[i] for i=1:num_hitters) + sum(pitchers[i,:Salary]*pitchers_lineup[i] for i=1:num_pitchers) <= 35000)\n",
    "\n",
    "\n",
    "    # exactly x different teams for the 8 hitters constraint\n",
    "    @variable(m, used_team[i=1:num_teams], Bin)\n",
    "    constr = @constraint(m, [i=1:num_teams], used_team[i] <= sum(hitters_teams[t, i]*hitters_lineup[t] for t=1:num_hitters))\n",
    "    constr = @constraint(m, [i=1:num_teams], sum(hitters_teams[t, i]*hitters_lineup[t] for t=1:num_hitters) == 4*used_team[i])\n",
    "    @constraint(m, sum(used_team[i] for i=1:num_teams) == 2)\n",
    "    \n",
    "\n",
    "    # No pitchers going against hitters\n",
    "    constr = @constraint(m, [i=1:num_pitchers], 6*pitchers_lineup[i] + sum(pitchers_opponents[k, i]*hitters_lineup[k] for k=1:num_hitters)<=6)\n",
    "\n",
    "    # Overlap Constraint\n",
    "    constr = @constraint(m, [i=1:size(lineups)[2]], sum(lineups[j,i]*hitters_lineup[j] for j=1:num_hitters) + sum(lineups[num_hitters+j,i]*pitchers_lineup[j] for j=1:num_pitchers) <= num_overlap)\n",
    "    \n",
    "                                                                                                                                                                                                            \n",
    "\n",
    "    # Objective\n",
    "    @objective(m, Max, sum(hitters[i,:FPPG]*hitters_lineup[i] for i=1:num_hitters) + sum(pitchers[i,:FPPG]*pitchers_lineup[i] for i=1:num_pitchers) )\n",
    "    \n",
    "\n",
    "\n",
    "    # Solve the integer programming problem\n",
    "    println(\"Solving Problem...\")\n",
    "    print(\"\\n\")\n",
    "    status = optimize!(m);\n",
    "\n",
    "\n",
    "    # Puts the output of one lineup into a format that will be used later\n",
    "    if status==:Optimal\n",
    "        hitters_lineup_copy = Array(Int64)(0)\n",
    "        for i=1:num_hitters\n",
    "            if getvalue(hitters_lineup[i]) >= 0.9 && getvalue(hitters_lineup[i]) <= 1.1\n",
    "                hitters_lineup_copy = vcat(hitters_lineup_copy, fill(1,1))\n",
    "            else\n",
    "                hitters_lineup_copy = vcat(hitters_lineup_copy, fill(0,1))\n",
    "            end\n",
    "        end\n",
    "        for i=1:num_pitchers\n",
    "            if getvalue(pitchers_lineup[i]) >= 0.9 && getvalue(pitchers_lineup[i]) <= 1.1\n",
    "                hitters_lineup_copy = vcat(hitters_lineup_copy, fill(1,1))\n",
    "            else\n",
    "                hitters_lineup_copy = vcat(hitters_lineup_copy, fill(0,1))\n",
    "            end\n",
    "        end\n",
    "        return(hitters_lineup_copy)\n",
    "    end\n",
    "end\n",
    "\n",
    "#=\n",
    "formulation is the type of formulation that you would like to use. Feel free to customize the formulations. In our paper we considered\n",
    "the Type 4 formulation in great detail, but we have included the code for all of the formulations dicussed in the paper here. For instance,\n",
    "if you would like to create lineups without stacking, change one_lineup_Type_4 below to one_lineup_no_stacking\n",
    "=#\n",
    "formulation = one_lineup_Type_4\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "function create_lineups(num_lineups, num_overlap, path_hitters, path_pitchers, formulation, path_to_output)\n",
    "    #=\n",
    "    num_lineups is an integer that is the number of lineups\n",
    "    num_overlap is an integer that gives the overlap between each lineup\n",
    "    path_hitters is a string that gives the path to the hitters csv file\n",
    "    path_pitchers is a string that gives the path to the pitchers csv file\n",
    "    formulation is the type of formulation you would like to use (for instance one_lineup_Type_1, one_lineup_Type_2, etc.)\n",
    "    path_to_output is a string where the final csv file with your lineups will be\n",
    "    =#\n",
    "\n",
    "\n",
    "    # Load information for hitters table\n",
    "    hitters = CSV.read(path_hitters, DataFrame)\n",
    "    \n",
    "    # Load information for pitchers table\n",
    "    pitchers = CSV.read(path_pitchers, DataFrame)\n",
    "    \n",
    "    # Number of hitters\n",
    "    num_hitters = size(hitters)[1]\n",
    "    \n",
    "    # Number of pitchers\n",
    "    num_pitchers = size(pitchers)[1]\n",
    "    \n",
    "    # catchers stores the information on which players are catchers\n",
    "    catcher = Array{Int}(undef, 0)\n",
    "    \n",
    "    # first baseman stores the information on which players are first baseman\n",
    "    first_baseman = Array{Int}(undef, 0)\n",
    "    \n",
    "    # second baseman stores the information on which players are second baseman\n",
    "    second_baseman = Array{Int}(undef, 0)\n",
    "    \n",
    "    # third baseman stores the information on which players are third baseman\n",
    "    third_baseman = Array{Int}(undef, 0)\n",
    "    \n",
    "    # shortstop stores the information on which players are shortsops\n",
    "    shortstop = Array{Int}(undef, 0)\n",
    "    \n",
    "    # outfielders stores the information on which players are outfielders\n",
    "    outfielders = Array{Int}(undef, 0)\n",
    "    \n",
    "    \n",
    "\n",
    "    #=\n",
    "    Process the position information in the hitters file to populate C, 1B, 2B, 3B, SS & OF's with the \n",
    "    corresponding correct information\n",
    "    =#\n",
    "    for i =1:num_hitters\n",
    "        if hitters[i,:Position] == \"C\"\n",
    "            catcher=vcat(catcher,fill(1,1))\n",
    "            first_baseman=vcat(first_baseman,fill(0,1))\n",
    "            second_baseman=vcat(second_baseman,fill(0,1))\n",
    "            third_baseman=vcat(third_baseman,fill(0,1))\n",
    "            shortstop=vcat(shortstop,fill(0,1))\n",
    "            outfielders=vcat(outfielders,fill(0,1))\n",
    "        elseif hitters[i,:Position] == \"1B\"\n",
    "            catcher=vcat(catcher,fill(1,1))\n",
    "            first_baseman=vcat(first_baseman,fill(0,1))\n",
    "            second_baseman=vcat(second_baseman,fill(0,1))\n",
    "            third_baseman=vcat(third_baseman,fill(0,1))\n",
    "            shortstop=vcat(shortstop,fill(0,1))\n",
    "            outfielders=vcat(outfielders,fill(0,1))\n",
    "        elseif hitters[i,:Position] == \"2B\"\n",
    "            catcher=vcat(catcher,fill(0,1))\n",
    "            first_baseman=vcat(first_baseman,fill(0,1))\n",
    "            second_baseman=vcat(second_baseman,fill(1,1))\n",
    "            third_baseman=vcat(third_baseman,fill(0,1))\n",
    "            shortstop=vcat(shortstop,fill(0,1))\n",
    "            outfielders=vcat(outfielders,fill(0,1))\n",
    "        elseif hitters[i,:Position] == \"3B\"\n",
    "            catcher=vcat(catcher,fill(0,1))\n",
    "            first_baseman=vcat(first_baseman,fill(0,1))\n",
    "            second_baseman=vcat(second_baseman,fill(0,1))\n",
    "            third_baseman=vcat(third_baseman,fill(1,1))\n",
    "            shortstop=vcat(shortstop,fill(0,1))\n",
    "            outfielders=vcat(outfielders,fill(0,1))\n",
    "        elseif hitters[i,:Position] == \"SS\"\n",
    "            catcher=vcat(catcher,fill(0,1))\n",
    "            first_baseman=vcat(first_baseman,fill(0,1))\n",
    "            second_baseman=vcat(second_baseman,fill(0,1))\n",
    "            third_baseman=vcat(third_baseman,fill(0,1))\n",
    "            shortstop=vcat(shortstop,fill(1,1))\n",
    "            outfielders=vcat(outfielders,fill(0,1))\n",
    "        else\n",
    "            catcher=vcat(catcher,fill(0,1))\n",
    "            first_baseman=vcat(first_baseman,fill(0,1))\n",
    "            second_baseman=vcat(second_baseman,fill(0,1))\n",
    "            third_baseman=vcat(third_baseman,fill(0,1))\n",
    "            shortstop=vcat(shortstop,fill(0,1))\n",
    "            outfielders=vcat(outfielders,fill(1,1))\n",
    "        end\n",
    "    end\n",
    "\n",
    "    catcher = catcher+first_baseman\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "    # Create team indicators from the information in the hitters file\n",
    "    teams = unique(hitters[!, :Team])\n",
    "\n",
    "    # Total number of teams\n",
    "    num_teams = size(teams)[1]\n",
    "\n",
    "    # player_info stores information on which team each player is on\n",
    "    player_info = zeros(Int, size(teams)[1])\n",
    "\n",
    "    # Populate player_info with the corresponding information\n",
    "    for j=1:size(teams)[1]\n",
    "        if hitters[1, :Team] == teams[j]\n",
    "            player_info[j] =1\n",
    "        end\n",
    "    end\n",
    "    hitters_teams = player_info'\n",
    "\n",
    "\n",
    "    for i=2:num_hitters\n",
    "        player_info = zeros(Int, size(teams)[1])\n",
    "        for j=1:size(teams)[1]\n",
    "            if hitters[i, :Team] == teams[j]\n",
    "                player_info[j] =1\n",
    "            end\n",
    "        end\n",
    "        hitters_teams = vcat(hitters_teams, player_info')\n",
    "    end\n",
    "\n",
    "\n",
    "\n",
    "    # Create pitcher identifiers so you know who they are playing\n",
    "    opponents = pitchers[!, :Opponent]\n",
    "    pitchers_teams = pitchers[!, :Team]\n",
    "    pitchers_opponents=[]\n",
    "    for num = 1:size(teams)[1]\n",
    "        if opponents[1] == teams[num]\n",
    "            pitchers_opponents = hitters_teams[:, num]\n",
    "        end\n",
    "    end\n",
    "    for num = 2:size(opponents)[1]\n",
    "        for num_2 = 1:size(teams)[1]\n",
    "            if opponents[num] == teams[num_2]\n",
    "                pitchers_opponents = hcat(pitchers_opponents, hitters_teams[:,num_2])\n",
    "            end\n",
    "        end\n",
    "    end\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    # Lineups using formulation as the stacking type\n",
    "    the_lineup= formulation(hitters, pitchers, hcat(zeros(Int, num_hitters + num_pitchers), zeros(Int, num_hitters + num_pitchers)), num_overlap, num_hitters, num_pitchers, catcher, first_baseman, second_baseman, third_baseman, shortstop, outfielders, num_teams, hitters_teams, pitchers_opponents)\n",
    "    the_lineup2= formulation(hitters, pitchers, hcat(the_lineup, zeros(Int, num_hitters + num_pitchers)), num_overlap, num_hitters, num_pitchers, catcher, first_baseman, second_baseman, third_baseman, shortstop, outfielders, num_teams, hitters_teams, pitchers_opponents)\n",
    "    tracer = hcat(the_lineup, the_lineup2)\n",
    "    for i=1:(num_lineups-2)\n",
    "        try\n",
    "            thelineup=formulation(hitters, pitchers, tracer, num_overlap, num_hitters, num_pitchers, catcher, first_baseman, second_baseman, third_baseman, shortstop, outfielders, num_teams, hitters_teams, pitchers_opponents)\n",
    "            tracer = hcat(tracer,thelineup)\n",
    "        catch\n",
    "            break\n",
    "        end\n",
    "    end\n",
    "    \n",
    "\n",
    "    # Create the output csv file\n",
    "    lineup2 = \"\"\n",
    "    for j = 1:size(tracer)[2]\n",
    "        lineup = [\"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"]\n",
    "    for i =1:num_hitters\n",
    "            if tracer[i,j] == 1\n",
    "            if catcher[i]==1\n",
    "                    if lineup[2]==\"\"\n",
    "                        lineup[2] = string(hitters[i,1])\n",
    "                    elseif lineup[9] ==\"\"\n",
    "                        lineup[9] = string(hitters[i,1])\n",
    "                    end\n",
    "                elseif first_baseman[i] == 1\n",
    "                    if lineup[2] == \"\"\n",
    "                        lineup[2] = string(hitters[i,1])\n",
    "                    elseif lineup[9] == \"\"\n",
    "                        lineup[9] = string(hitters[i,1])\n",
    "                    end\n",
    "                elseif second_baseman[i] == 1\n",
    "                    if lineup[3] == \"\"\n",
    "                        lineup[3] = string(hitters[i,1])\n",
    "                    elseif lineup[9] == \"\"\n",
    "                        lineup[9] = string(hitters[i,1])\n",
    "                    end\n",
    "                elseif third_baseman[i] == 1\n",
    "                    if lineup[4] == \"\"\n",
    "                        lineup[4] = string(hitters[i,1])\n",
    "                    elseif lineup[9] == \"\"\n",
    "                        lineup[9] = string(hitters[i,1])\n",
    "                    end\n",
    "                elseif shortstop[i] == 1\n",
    "                    if lineup[5] == \"\"\n",
    "                        lineup[5] = string(hitters[i,1])\n",
    "                    elseif lineup[9] == \"\"\n",
    "                        lineup[9] = string(hitters[i,1])\n",
    "                    end\n",
    "                elseif outfielders[i] == 1\n",
    "                    if lineup[6] == \"\"\n",
    "                        lineup[6] = string(hitters[i,1])\n",
    "                    elseif lineup[7] == \"\"\n",
    "                        lineup[7] = string(hitters[i,1])\n",
    "                    elseif lineup[8] == \"\"\n",
    "                        lineup[8] = string(hitters[i,1])   \n",
    "                    elseif lineup[9] == \"\"\n",
    "                        lineup[9] = string(hitters[i,1])\n",
    "                    end\n",
    "                end\n",
    "            end\n",
    "        end\n",
    "        for i =1:num_pitchers\n",
    "            if tracer[num_hitters+i,j] == 1\n",
    "                lineup[1] = string(pitchers[i,1])\n",
    "            end\n",
    "        end\n",
    "        for name in lineup\n",
    "            lineup2 = string(lineup2, name, \",\")\n",
    "        end\n",
    "        lineup2 = chop(lineup2)\n",
    "        lineup2 = string(lineup2, \"\"\"\n",
    "        \"\"\")\n",
    "    end\n",
    "    outfile = open(path_to_output, \"w\")\n",
    "    write(outfile, lineup2)\n",
    "    close(outfile)\n",
    "end\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Running the code\n",
    "create_lineups(num_lineups, num_overlap, path_hitters, path_pitchers, formulation, path_to_output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77812af5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.7.2",
   "language": "julia",
   "name": "julia-1.7"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
